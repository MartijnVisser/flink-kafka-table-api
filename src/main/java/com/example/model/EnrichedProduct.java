/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Model class representing an enriched product event that includes data from both Kafka and MySQL */
@org.apache.avro.specific.AvroGenerated
public class EnrichedProduct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4054516777347630410L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnrichedProduct\",\"namespace\":\"com.example.model\",\"doc\":\"Model class representing an enriched product event that includes data from both Kafka and MySQL\",\"fields\":[{\"name\":\"product_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique identifier for the product\"},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2},\"doc\":\"Price of the product with 2 decimal places\"},{\"name\":\"quantity\",\"type\":\"int\",\"doc\":\"Quantity of the product\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when the product event was created\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the product\"},{\"name\":\"brand\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Brand of the product\"},{\"name\":\"vendor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Vendor of the product\"},{\"name\":\"department\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Department the product belongs to\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<EnrichedProduct> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnrichedProduct> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnrichedProduct> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnrichedProduct> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnrichedProduct> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnrichedProduct to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnrichedProduct from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnrichedProduct instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnrichedProduct fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the product */
  private java.lang.String product_id;
  /** Price of the product with 2 decimal places */
  private java.nio.ByteBuffer price;
  /** Quantity of the product */
  private int quantity;
  /** Timestamp when the product event was created */
  private java.time.Instant timestamp;
  /** Name of the product */
  private java.lang.String name;
  /** Brand of the product */
  private java.lang.String brand;
  /** Vendor of the product */
  private java.lang.String vendor;
  /** Department the product belongs to */
  private java.lang.String department;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnrichedProduct() {}

  /**
   * All-args constructor.
   * @param product_id Unique identifier for the product
   * @param price Price of the product with 2 decimal places
   * @param quantity Quantity of the product
   * @param timestamp Timestamp when the product event was created
   * @param name Name of the product
   * @param brand Brand of the product
   * @param vendor Vendor of the product
   * @param department Department the product belongs to
   */
  public EnrichedProduct(java.lang.String product_id, java.nio.ByteBuffer price, java.lang.Integer quantity, java.time.Instant timestamp, java.lang.String name, java.lang.String brand, java.lang.String vendor, java.lang.String department) {
    this.product_id = product_id;
    this.price = price;
    this.quantity = quantity;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.name = name;
    this.brand = brand;
    this.vendor = vendor;
    this.department = department;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product_id;
    case 1: return price;
    case 2: return quantity;
    case 3: return timestamp;
    case 4: return name;
    case 5: return brand;
    case 6: return vendor;
    case 7: return department;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product_id = value$ != null ? value$.toString() : null; break;
    case 1: price = (java.nio.ByteBuffer)value$; break;
    case 2: quantity = (java.lang.Integer)value$; break;
    case 3: timestamp = (java.time.Instant)value$; break;
    case 4: name = value$ != null ? value$.toString() : null; break;
    case 5: brand = value$ != null ? value$.toString() : null; break;
    case 6: vendor = value$ != null ? value$.toString() : null; break;
    case 7: department = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return Unique identifier for the product
   */
  public java.lang.String getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * Unique identifier for the product
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Price of the product with 2 decimal places
   */
  public java.nio.ByteBuffer getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * Price of the product with 2 decimal places
   * @param value the value to set.
   */
  public void setPrice(java.nio.ByteBuffer value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return Quantity of the product
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * Quantity of the product
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the product event was created
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the product event was created
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the product
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * Name of the product
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'brand' field.
   * @return Brand of the product
   */
  public java.lang.String getBrand() {
    return brand;
  }


  /**
   * Sets the value of the 'brand' field.
   * Brand of the product
   * @param value the value to set.
   */
  public void setBrand(java.lang.String value) {
    this.brand = value;
  }

  /**
   * Gets the value of the 'vendor' field.
   * @return Vendor of the product
   */
  public java.lang.String getVendor() {
    return vendor;
  }


  /**
   * Sets the value of the 'vendor' field.
   * Vendor of the product
   * @param value the value to set.
   */
  public void setVendor(java.lang.String value) {
    this.vendor = value;
  }

  /**
   * Gets the value of the 'department' field.
   * @return Department the product belongs to
   */
  public java.lang.String getDepartment() {
    return department;
  }


  /**
   * Sets the value of the 'department' field.
   * Department the product belongs to
   * @param value the value to set.
   */
  public void setDepartment(java.lang.String value) {
    this.department = value;
  }

  /**
   * Creates a new EnrichedProduct RecordBuilder.
   * @return A new EnrichedProduct RecordBuilder
   */
  public static com.example.model.EnrichedProduct.Builder newBuilder() {
    return new com.example.model.EnrichedProduct.Builder();
  }

  /**
   * Creates a new EnrichedProduct RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnrichedProduct RecordBuilder
   */
  public static com.example.model.EnrichedProduct.Builder newBuilder(com.example.model.EnrichedProduct.Builder other) {
    if (other == null) {
      return new com.example.model.EnrichedProduct.Builder();
    } else {
      return new com.example.model.EnrichedProduct.Builder(other);
    }
  }

  /**
   * Creates a new EnrichedProduct RecordBuilder by copying an existing EnrichedProduct instance.
   * @param other The existing instance to copy.
   * @return A new EnrichedProduct RecordBuilder
   */
  public static com.example.model.EnrichedProduct.Builder newBuilder(com.example.model.EnrichedProduct other) {
    if (other == null) {
      return new com.example.model.EnrichedProduct.Builder();
    } else {
      return new com.example.model.EnrichedProduct.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnrichedProduct instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnrichedProduct>
    implements org.apache.avro.data.RecordBuilder<EnrichedProduct> {

    /** Unique identifier for the product */
    private java.lang.String product_id;
    /** Price of the product with 2 decimal places */
    private java.nio.ByteBuffer price;
    /** Quantity of the product */
    private int quantity;
    /** Timestamp when the product event was created */
    private java.time.Instant timestamp;
    /** Name of the product */
    private java.lang.String name;
    /** Brand of the product */
    private java.lang.String brand;
    /** Vendor of the product */
    private java.lang.String vendor;
    /** Department the product belongs to */
    private java.lang.String department;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.model.EnrichedProduct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product_id)) {
        this.product_id = data().deepCopy(fields()[0].schema(), other.product_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.brand)) {
        this.brand = data().deepCopy(fields()[5].schema(), other.brand);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.vendor)) {
        this.vendor = data().deepCopy(fields()[6].schema(), other.vendor);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.department)) {
        this.department = data().deepCopy(fields()[7].schema(), other.department);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing EnrichedProduct instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.model.EnrichedProduct other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.product_id)) {
        this.product_id = data().deepCopy(fields()[0].schema(), other.product_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.quantity)) {
        this.quantity = data().deepCopy(fields()[2].schema(), other.quantity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.brand)) {
        this.brand = data().deepCopy(fields()[5].schema(), other.brand);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vendor)) {
        this.vendor = data().deepCopy(fields()[6].schema(), other.vendor);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.department)) {
        this.department = data().deepCopy(fields()[7].schema(), other.department);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'product_id' field.
      * Unique identifier for the product
      * @return The value.
      */
    public java.lang.String getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * Unique identifier for the product
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setProductId(java.lang.String value) {
      validate(fields()[0], value);
      this.product_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * Unique identifier for the product
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'product_id' field.
      * Unique identifier for the product
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Price of the product with 2 decimal places
      * @return The value.
      */
    public java.nio.ByteBuffer getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * Price of the product with 2 decimal places
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setPrice(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Price of the product with 2 decimal places
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * Price of the product with 2 decimal places
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearPrice() {
      price = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * Quantity of the product
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * Quantity of the product
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setQuantity(int value) {
      validate(fields()[2], value);
      this.quantity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * Quantity of the product
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'quantity' field.
      * Quantity of the product
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearQuantity() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the product event was created
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the product event was created
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[3], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the product event was created
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the product event was created
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the product
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * Name of the product
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setName(java.lang.String value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the product
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the product
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * Brand of the product
      * @return The value.
      */
    public java.lang.String getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * Brand of the product
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setBrand(java.lang.String value) {
      validate(fields()[5], value);
      this.brand = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * Brand of the product
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'brand' field.
      * Brand of the product
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'vendor' field.
      * Vendor of the product
      * @return The value.
      */
    public java.lang.String getVendor() {
      return vendor;
    }


    /**
      * Sets the value of the 'vendor' field.
      * Vendor of the product
      * @param value The value of 'vendor'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setVendor(java.lang.String value) {
      validate(fields()[6], value);
      this.vendor = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'vendor' field has been set.
      * Vendor of the product
      * @return True if the 'vendor' field has been set, false otherwise.
      */
    public boolean hasVendor() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'vendor' field.
      * Vendor of the product
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearVendor() {
      vendor = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * Department the product belongs to
      * @return The value.
      */
    public java.lang.String getDepartment() {
      return department;
    }


    /**
      * Sets the value of the 'department' field.
      * Department the product belongs to
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder setDepartment(java.lang.String value) {
      validate(fields()[7], value);
      this.department = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * Department the product belongs to
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'department' field.
      * Department the product belongs to
      * @return This builder.
      */
    public com.example.model.EnrichedProduct.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnrichedProduct build() {
      try {
        EnrichedProduct record = new EnrichedProduct();
        record.product_id = fieldSetFlags()[0] ? this.product_id : (java.lang.String) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.quantity = fieldSetFlags()[2] ? this.quantity : (java.lang.Integer) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.time.Instant) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.String) defaultValue(fields()[4]);
        record.brand = fieldSetFlags()[5] ? this.brand : (java.lang.String) defaultValue(fields()[5]);
        record.vendor = fieldSetFlags()[6] ? this.vendor : (java.lang.String) defaultValue(fields()[6]);
        record.department = fieldSetFlags()[7] ? this.department : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnrichedProduct>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnrichedProduct>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnrichedProduct>
    READER$ = (org.apache.avro.io.DatumReader<EnrichedProduct>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










