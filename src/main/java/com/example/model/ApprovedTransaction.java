/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ApprovedTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4735850388535692590L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApprovedTransaction\",\"namespace\":\"com.example.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"merchant\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amountInUsd\",\"type\":\"double\"},{\"name\":\"processingTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ApprovedTransaction> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApprovedTransaction> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ApprovedTransaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ApprovedTransaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ApprovedTransaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ApprovedTransaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ApprovedTransaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ApprovedTransaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ApprovedTransaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private double amount;
  private java.lang.String currency;
  private java.time.Instant timestamp;
  private java.lang.String merchant;
  private java.lang.String userId;
  private double amountInUsd;
  private java.time.Instant processingTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApprovedTransaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param timestamp The new value for timestamp
   * @param merchant The new value for merchant
   * @param userId The new value for userId
   * @param amountInUsd The new value for amountInUsd
   * @param processingTimestamp The new value for processingTimestamp
   */
  public ApprovedTransaction(java.lang.String id, java.lang.Double amount, java.lang.String currency, java.time.Instant timestamp, java.lang.String merchant, java.lang.String userId, java.lang.Double amountInUsd, java.time.Instant processingTimestamp) {
    this.id = id;
    this.amount = amount;
    this.currency = currency;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.merchant = merchant;
    this.userId = userId;
    this.amountInUsd = amountInUsd;
    this.processingTimestamp = processingTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return amount;
    case 2: return currency;
    case 3: return timestamp;
    case 4: return merchant;
    case 5: return userId;
    case 6: return amountInUsd;
    case 7: return processingTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: amount = (java.lang.Double)value$; break;
    case 2: currency = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.time.Instant)value$; break;
    case 4: merchant = value$ != null ? value$.toString() : null; break;
    case 5: userId = value$ != null ? value$.toString() : null; break;
    case 6: amountInUsd = (java.lang.Double)value$; break;
    case 7: processingTimestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public double getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'merchant' field.
   * @return The value of the 'merchant' field.
   */
  public java.lang.String getMerchant() {
    return merchant;
  }


  /**
   * Sets the value of the 'merchant' field.
   * @param value the value to set.
   */
  public void setMerchant(java.lang.String value) {
    this.merchant = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'amountInUsd' field.
   * @return The value of the 'amountInUsd' field.
   */
  public double getAmountInUsd() {
    return amountInUsd;
  }


  /**
   * Sets the value of the 'amountInUsd' field.
   * @param value the value to set.
   */
  public void setAmountInUsd(double value) {
    this.amountInUsd = value;
  }

  /**
   * Gets the value of the 'processingTimestamp' field.
   * @return The value of the 'processingTimestamp' field.
   */
  public java.time.Instant getProcessingTimestamp() {
    return processingTimestamp;
  }


  /**
   * Sets the value of the 'processingTimestamp' field.
   * @param value the value to set.
   */
  public void setProcessingTimestamp(java.time.Instant value) {
    this.processingTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new ApprovedTransaction RecordBuilder.
   * @return A new ApprovedTransaction RecordBuilder
   */
  public static com.example.model.ApprovedTransaction.Builder newBuilder() {
    return new com.example.model.ApprovedTransaction.Builder();
  }

  /**
   * Creates a new ApprovedTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApprovedTransaction RecordBuilder
   */
  public static com.example.model.ApprovedTransaction.Builder newBuilder(com.example.model.ApprovedTransaction.Builder other) {
    if (other == null) {
      return new com.example.model.ApprovedTransaction.Builder();
    } else {
      return new com.example.model.ApprovedTransaction.Builder(other);
    }
  }

  /**
   * Creates a new ApprovedTransaction RecordBuilder by copying an existing ApprovedTransaction instance.
   * @param other The existing instance to copy.
   * @return A new ApprovedTransaction RecordBuilder
   */
  public static com.example.model.ApprovedTransaction.Builder newBuilder(com.example.model.ApprovedTransaction other) {
    if (other == null) {
      return new com.example.model.ApprovedTransaction.Builder();
    } else {
      return new com.example.model.ApprovedTransaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for ApprovedTransaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApprovedTransaction>
    implements org.apache.avro.data.RecordBuilder<ApprovedTransaction> {

    private java.lang.String id;
    private double amount;
    private java.lang.String currency;
    private java.time.Instant timestamp;
    private java.lang.String merchant;
    private java.lang.String userId;
    private double amountInUsd;
    private java.time.Instant processingTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.model.ApprovedTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.merchant)) {
        this.merchant = data().deepCopy(fields()[4].schema(), other.merchant);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.userId)) {
        this.userId = data().deepCopy(fields()[5].schema(), other.userId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.amountInUsd)) {
        this.amountInUsd = data().deepCopy(fields()[6].schema(), other.amountInUsd);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.processingTimestamp)) {
        this.processingTimestamp = data().deepCopy(fields()[7].schema(), other.processingTimestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing ApprovedTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.model.ApprovedTransaction other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.merchant)) {
        this.merchant = data().deepCopy(fields()[4].schema(), other.merchant);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.userId)) {
        this.userId = data().deepCopy(fields()[5].schema(), other.userId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.amountInUsd)) {
        this.amountInUsd = data().deepCopy(fields()[6].schema(), other.amountInUsd);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.processingTimestamp)) {
        this.processingTimestamp = data().deepCopy(fields()[7].schema(), other.processingTimestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public double getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setCurrency(java.lang.String value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[3], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'merchant' field.
      * @return The value.
      */
    public java.lang.String getMerchant() {
      return merchant;
    }


    /**
      * Sets the value of the 'merchant' field.
      * @param value The value of 'merchant'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setMerchant(java.lang.String value) {
      validate(fields()[4], value);
      this.merchant = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'merchant' field has been set.
      * @return True if the 'merchant' field has been set, false otherwise.
      */
    public boolean hasMerchant() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'merchant' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearMerchant() {
      merchant = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setUserId(java.lang.String value) {
      validate(fields()[5], value);
      this.userId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'amountInUsd' field.
      * @return The value.
      */
    public double getAmountInUsd() {
      return amountInUsd;
    }


    /**
      * Sets the value of the 'amountInUsd' field.
      * @param value The value of 'amountInUsd'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setAmountInUsd(double value) {
      validate(fields()[6], value);
      this.amountInUsd = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'amountInUsd' field has been set.
      * @return True if the 'amountInUsd' field has been set, false otherwise.
      */
    public boolean hasAmountInUsd() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'amountInUsd' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearAmountInUsd() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'processingTimestamp' field.
      * @return The value.
      */
    public java.time.Instant getProcessingTimestamp() {
      return processingTimestamp;
    }


    /**
      * Sets the value of the 'processingTimestamp' field.
      * @param value The value of 'processingTimestamp'.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder setProcessingTimestamp(java.time.Instant value) {
      validate(fields()[7], value);
      this.processingTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'processingTimestamp' field has been set.
      * @return True if the 'processingTimestamp' field has been set, false otherwise.
      */
    public boolean hasProcessingTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'processingTimestamp' field.
      * @return This builder.
      */
    public com.example.model.ApprovedTransaction.Builder clearProcessingTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApprovedTransaction build() {
      try {
        ApprovedTransaction record = new ApprovedTransaction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        record.currency = fieldSetFlags()[2] ? this.currency : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.time.Instant) defaultValue(fields()[3]);
        record.merchant = fieldSetFlags()[4] ? this.merchant : (java.lang.String) defaultValue(fields()[4]);
        record.userId = fieldSetFlags()[5] ? this.userId : (java.lang.String) defaultValue(fields()[5]);
        record.amountInUsd = fieldSetFlags()[6] ? this.amountInUsd : (java.lang.Double) defaultValue(fields()[6]);
        record.processingTimestamp = fieldSetFlags()[7] ? this.processingTimestamp : (java.time.Instant) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApprovedTransaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApprovedTransaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApprovedTransaction>
    READER$ = (org.apache.avro.io.DatumReader<ApprovedTransaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










